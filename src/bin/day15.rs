use std::collections::HashMap;
use std::collections::HashSet;

const INPUT_FILE: &str = include_str!("../../inputs/day15.txt");

fn parse(input: &str) -> Vec<Vec<u32>> {
    input
        .lines()
        .map(|input_row| {
            input_row
                .chars()
                .map(|risk_level| risk_level.to_digit(10).unwrap())
                .collect()
        })
        .collect()
}

fn parse_part_2(input: &str) -> Vec<Vec<u32>> {
    let expanded_horizontal: Vec<Vec<u32>> = input
        .lines()
        .map(|input_row| {
            let columns: Vec<u32> = input_row
                .chars()
                .map(|i| i.to_digit(10).unwrap())
                .collect();
            
            let mut expanded = vec![columns];
            
            for _ in 0..4 {
                let next_columns: Vec<u32> = expanded.last().unwrap()
                    .iter()
                    .map(|risk_level| {
                        if *risk_level == 9 {
                            return 1;
                        }
                        return risk_level + 1;
                    })
                    .collect();

                expanded.push(next_columns);
            }

            expanded.into_iter().flatten().collect()
        })
        .collect();

    let mut full = vec![expanded_horizontal];

    for _ in 0..4 {
        let next_row: Vec<Vec<u32>> = full.last().unwrap()
            .iter()
            .map(|row| {
                row.iter().map(|risk_level| {
                    if *risk_level == 9 {
                        return 1;
                    }
                    return risk_level + 1;
                })
                .collect()
            })
            .collect();
        full.push(next_row);
    }

    full.into_iter().flatten().collect()
}

fn dijkstra(grid: Vec<Vec<u32>>, source: (usize, usize), target: (usize, usize)) -> u32 {
    let mut dist: Vec<Vec<u32>> = vec![vec![u32::MAX; grid[0].len()]; grid.len()];
    let mut queue: HashSet<(usize, usize)> = HashSet::new();

    for y in 0..grid.len() {
        for x in 0..grid[y].len() {
            queue.insert((x, y));
        }
    }

    let max_x = grid[0].len() - 1;
    let max_y = grid.len() - 1;

    dist[source.1][source.0] = 0;

    while !queue.is_empty() {
        let u = queue
            .iter()
            .min_by(|a, b| dist[a.1][a.0].cmp(&dist[b.1][b.0]))
            .unwrap()
            .clone();

        if u == target {
            return dist[u.1][u.0];
        }

        queue.remove(&u);

        // for each neighbour still in queue
        if u.0 > 0 {
            let v = (u.0 - 1, u.1);
            if queue.contains(&v) {
                let alt = dist[u.1][u.0] + grid[v.1][v.0];
                if alt < dist[v.1][v.0] {
                    dist[v.1][v.0] = alt;
                }
            }
        }

        if u.1 > 0 {
            let v = (u.0, u.1 - 1);
            if queue.contains(&v) {
                let alt = dist[u.1][u.0] + grid[v.1][v.0];
                if alt < dist[v.1][v.0] {
                    dist[v.1][v.0] = alt;
                }
            }
        }

        if u.0 < max_x {
            let v = (u.0 + 1, u.1);
            if queue.contains(&v) {
                let alt = dist[u.1][u.0] + grid[v.1][v.0];
                if alt < dist[v.1][v.0] {
                    dist[v.1][v.0] = alt;
                }
            }
        }

        if u.1 < max_y {
            let v = (u.0, u.1 + 1);
            if queue.contains(&v) {
                let alt = dist[u.1][u.0] + grid[v.1][v.0];
                if alt < dist[v.1][v.0] {
                    dist[v.1][v.0] = alt;
                }
            }
        }
    }
    unreachable!();
}

fn part_1(input: &str) -> u32 {
    let grid = parse(input);

    let source = (0, 0);
    let target = (grid[0].len() - 1, grid.len() - 1);

    let risk_level = dijkstra(grid, source, target);

    risk_level
}

fn part_2(input: &str) -> u32 {
    let grid = parse_part_2(input);

    let source = (0, 0);
    let target = (grid[0].len() - 1, grid.len() - 1);

    let risk_level = dijkstra(grid, source, target);

    risk_level
}

fn main() {
    let part_1_result = part_1(INPUT_FILE);
    println!("[INFO]: Part 1: {:?}", part_1_result);

    let part_2_result = part_2(INPUT_FILE);
    println!("[INFO]: Part 2: {:?}", part_2_result);
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn it_solves_part1_example() {
        assert_eq!(
            part_1(
                "1163751742\n\
                 1381373672\n\
                 2136511328\n\
                 3694931569\n\
                 7463417111\n\
                 1319128137\n\
                 1359912421\n\
                 3125421639\n\
                 1293138521\n\
                 2311944581"
            ),
            40
        );
    }

    #[test]
    fn it_parses_simple_part2_correctly() {
        assert_eq!(
            parse_part_2(
                "8"
            ),
            vec![
                vec![8,9,1,2,3],
                vec![9,1,2,3,4],
                vec![1,2,3,4,5],
                vec![2,3,4,5,6],
                vec![3,4,5,6,7],
            ]
        );
    }

    #[test]
    fn it_parses_complex_part2_correctly() {
        assert_eq!(
            parse_part_2(
                "1163751742\n\
                 1381373672\n\
                 2136511328\n\
                 3694931569\n\
                 7463417111\n\
                 1319128137\n\
                 1359912421\n\
                 3125421639\n\
                 1293138521\n\
                 2311944581"
            ),
            vec![
                vec![1,1,6,3,7,5,1,7,4,2,2,2,7,4,8,6,2,8,5,3,3,3,8,5,9,7,3,9,6,4,4,4,9,6,1,8,4,1,7,5,5,5,1,7,2,9,5,2,8,6],
                vec![1,3,8,1,3,7,3,6,7,2,2,4,9,2,4,8,4,7,8,3,3,5,1,3,5,9,5,8,9,4,4,6,2,4,6,1,6,9,1,5,5,7,3,5,7,2,7,1,2,6],
                vec![2,1,3,6,5,1,1,3,2,8,3,2,4,7,6,2,2,4,3,9,4,3,5,8,7,3,3,5,4,1,5,4,6,9,8,4,4,6,5,2,6,5,7,1,9,5,5,7,6,3],
                vec![3,6,9,4,9,3,1,5,6,9,4,7,1,5,1,4,2,6,7,1,5,8,2,6,2,5,3,7,8,2,6,9,3,7,3,6,4,8,9,3,7,1,4,8,4,7,5,9,1,4],
                vec![7,4,6,3,4,1,7,1,1,1,8,5,7,4,5,2,8,2,2,2,9,6,8,5,6,3,9,3,3,3,1,7,9,6,7,4,1,4,4,4,2,8,1,7,8,5,2,5,5,5],
                vec![1,3,1,9,1,2,8,1,3,7,2,4,2,1,2,3,9,2,4,8,3,5,3,2,3,4,1,3,5,9,4,6,4,3,4,5,2,4,6,1,5,7,5,4,5,6,3,5,7,2],
                vec![1,3,5,9,9,1,2,4,2,1,2,4,6,1,1,2,3,5,3,2,3,5,7,2,2,3,4,6,4,3,4,6,8,3,3,4,5,7,5,4,5,7,9,4,4,5,6,8,6,5],
                vec![3,1,2,5,4,2,1,6,3,9,4,2,3,6,5,3,2,7,4,1,5,3,4,7,6,4,3,8,5,2,6,4,5,8,7,5,4,9,6,3,7,5,6,9,8,6,5,1,7,4],
                vec![1,2,9,3,1,3,8,5,2,1,2,3,1,4,2,4,9,6,3,2,3,4,2,5,3,5,1,7,4,3,4,5,3,6,4,6,2,8,5,4,5,6,4,7,5,7,3,9,6,5],
                vec![2,3,1,1,9,4,4,5,8,1,3,4,2,2,1,5,5,6,9,2,4,5,3,3,2,6,6,7,1,3,5,6,4,4,3,7,7,8,2,4,6,7,5,5,4,8,8,9,3,5],
                vec![2,2,7,4,8,6,2,8,5,3,3,3,8,5,9,7,3,9,6,4,4,4,9,6,1,8,4,1,7,5,5,5,1,7,2,9,5,2,8,6,6,6,2,8,3,1,6,3,9,7],
                vec![2,4,9,2,4,8,4,7,8,3,3,5,1,3,5,9,5,8,9,4,4,6,2,4,6,1,6,9,1,5,5,7,3,5,7,2,7,1,2,6,6,8,4,6,8,3,8,2,3,7],
                vec![3,2,4,7,6,2,2,4,3,9,4,3,5,8,7,3,3,5,4,1,5,4,6,9,8,4,4,6,5,2,6,5,7,1,9,5,5,7,6,3,7,6,8,2,1,6,6,8,7,4],
                vec![4,7,1,5,1,4,2,6,7,1,5,8,2,6,2,5,3,7,8,2,6,9,3,7,3,6,4,8,9,3,7,1,4,8,4,7,5,9,1,4,8,2,5,9,5,8,6,1,2,5],
                vec![8,5,7,4,5,2,8,2,2,2,9,6,8,5,6,3,9,3,3,3,1,7,9,6,7,4,1,4,4,4,2,8,1,7,8,5,2,5,5,5,3,9,2,8,9,6,3,6,6,6],
                vec![2,4,2,1,2,3,9,2,4,8,3,5,3,2,3,4,1,3,5,9,4,6,4,3,4,5,2,4,6,1,5,7,5,4,5,6,3,5,7,2,6,8,6,5,6,7,4,6,8,3],
                vec![2,4,6,1,1,2,3,5,3,2,3,5,7,2,2,3,4,6,4,3,4,6,8,3,3,4,5,7,5,4,5,7,9,4,4,5,6,8,6,5,6,8,1,5,5,6,7,9,7,6],
                vec![4,2,3,6,5,3,2,7,4,1,5,3,4,7,6,4,3,8,5,2,6,4,5,8,7,5,4,9,6,3,7,5,6,9,8,6,5,1,7,4,8,6,7,1,9,7,6,2,8,5],
                vec![2,3,1,4,2,4,9,6,3,2,3,4,2,5,3,5,1,7,4,3,4,5,3,6,4,6,2,8,5,4,5,6,4,7,5,7,3,9,6,5,6,7,5,8,6,8,4,1,7,6],
                vec![3,4,2,2,1,5,5,6,9,2,4,5,3,3,2,6,6,7,1,3,5,6,4,4,3,7,7,8,2,4,6,7,5,5,4,8,8,9,3,5,7,8,6,6,5,9,9,1,4,6],
                vec![3,3,8,5,9,7,3,9,6,4,4,4,9,6,1,8,4,1,7,5,5,5,1,7,2,9,5,2,8,6,6,6,2,8,3,1,6,3,9,7,7,7,3,9,4,2,7,4,1,8],
                vec![3,5,1,3,5,9,5,8,9,4,4,6,2,4,6,1,6,9,1,5,5,7,3,5,7,2,7,1,2,6,6,8,4,6,8,3,8,2,3,7,7,9,5,7,9,4,9,3,4,8],
                vec![4,3,5,8,7,3,3,5,4,1,5,4,6,9,8,4,4,6,5,2,6,5,7,1,9,5,5,7,6,3,7,6,8,2,1,6,6,8,7,4,8,7,9,3,2,7,7,9,8,5],
                vec![5,8,2,6,2,5,3,7,8,2,6,9,3,7,3,6,4,8,9,3,7,1,4,8,4,7,5,9,1,4,8,2,5,9,5,8,6,1,2,5,9,3,6,1,6,9,7,2,3,6],
                vec![9,6,8,5,6,3,9,3,3,3,1,7,9,6,7,4,1,4,4,4,2,8,1,7,8,5,2,5,5,5,3,9,2,8,9,6,3,6,6,6,4,1,3,9,1,7,4,7,7,7],
                vec![3,5,3,2,3,4,1,3,5,9,4,6,4,3,4,5,2,4,6,1,5,7,5,4,5,6,3,5,7,2,6,8,6,5,6,7,4,6,8,3,7,9,7,6,7,8,5,7,9,4],
                vec![3,5,7,2,2,3,4,6,4,3,4,6,8,3,3,4,5,7,5,4,5,7,9,4,4,5,6,8,6,5,6,8,1,5,5,6,7,9,7,6,7,9,2,6,6,7,8,1,8,7],
                vec![5,3,4,7,6,4,3,8,5,2,6,4,5,8,7,5,4,9,6,3,7,5,6,9,8,6,5,1,7,4,8,6,7,1,9,7,6,2,8,5,9,7,8,2,1,8,7,3,9,6],
                vec![3,4,2,5,3,5,1,7,4,3,4,5,3,6,4,6,2,8,5,4,5,6,4,7,5,7,3,9,6,5,6,7,5,8,6,8,4,1,7,6,7,8,6,9,7,9,5,2,8,7],
                vec![4,5,3,3,2,6,6,7,1,3,5,6,4,4,3,7,7,8,2,4,6,7,5,5,4,8,8,9,3,5,7,8,6,6,5,9,9,1,4,6,8,9,7,7,6,1,1,2,5,7],
                vec![4,4,9,6,1,8,4,1,7,5,5,5,1,7,2,9,5,2,8,6,6,6,2,8,3,1,6,3,9,7,7,7,3,9,4,2,7,4,1,8,8,8,4,1,5,3,8,5,2,9],
                vec![4,6,2,4,6,1,6,9,1,5,5,7,3,5,7,2,7,1,2,6,6,8,4,6,8,3,8,2,3,7,7,9,5,7,9,4,9,3,4,8,8,1,6,8,1,5,1,4,5,9],
                vec![5,4,6,9,8,4,4,6,5,2,6,5,7,1,9,5,5,7,6,3,7,6,8,2,1,6,6,8,7,4,8,7,9,3,2,7,7,9,8,5,9,8,1,4,3,8,8,1,9,6],
                vec![6,9,3,7,3,6,4,8,9,3,7,1,4,8,4,7,5,9,1,4,8,2,5,9,5,8,6,1,2,5,9,3,6,1,6,9,7,2,3,6,1,4,7,2,7,1,8,3,4,7],
                vec![1,7,9,6,7,4,1,4,4,4,2,8,1,7,8,5,2,5,5,5,3,9,2,8,9,6,3,6,6,6,4,1,3,9,1,7,4,7,7,7,5,2,4,1,2,8,5,8,8,8],
                vec![4,6,4,3,4,5,2,4,6,1,5,7,5,4,5,6,3,5,7,2,6,8,6,5,6,7,4,6,8,3,7,9,7,6,7,8,5,7,9,4,8,1,8,7,8,9,6,8,1,5],
                vec![4,6,8,3,3,4,5,7,5,4,5,7,9,4,4,5,6,8,6,5,6,8,1,5,5,6,7,9,7,6,7,9,2,6,6,7,8,1,8,7,8,1,3,7,7,8,9,2,9,8],
                vec![6,4,5,8,7,5,4,9,6,3,7,5,6,9,8,6,5,1,7,4,8,6,7,1,9,7,6,2,8,5,9,7,8,2,1,8,7,3,9,6,1,8,9,3,2,9,8,4,1,7],
                vec![4,5,3,6,4,6,2,8,5,4,5,6,4,7,5,7,3,9,6,5,6,7,5,8,6,8,4,1,7,6,7,8,6,9,7,9,5,2,8,7,8,9,7,1,8,1,6,3,9,8],
                vec![5,6,4,4,3,7,7,8,2,4,6,7,5,5,4,8,8,9,3,5,7,8,6,6,5,9,9,1,4,6,8,9,7,7,6,1,1,2,5,7,9,1,8,8,7,2,2,3,6,8],
                vec![5,5,1,7,2,9,5,2,8,6,6,6,2,8,3,1,6,3,9,7,7,7,3,9,4,2,7,4,1,8,8,8,4,1,5,3,8,5,2,9,9,9,5,2,6,4,9,6,3,1],
                vec![5,7,3,5,7,2,7,1,2,6,6,8,4,6,8,3,8,2,3,7,7,9,5,7,9,4,9,3,4,8,8,1,6,8,1,5,1,4,5,9,9,2,7,9,2,6,2,5,6,1],
                vec![6,5,7,1,9,5,5,7,6,3,7,6,8,2,1,6,6,8,7,4,8,7,9,3,2,7,7,9,8,5,9,8,1,4,3,8,8,1,9,6,1,9,2,5,4,9,9,2,1,7],
                vec![7,1,4,8,4,7,5,9,1,4,8,2,5,9,5,8,6,1,2,5,9,3,6,1,6,9,7,2,3,6,1,4,7,2,7,1,8,3,4,7,2,5,8,3,8,2,9,4,5,8],
                vec![2,8,1,7,8,5,2,5,5,5,3,9,2,8,9,6,3,6,6,6,4,1,3,9,1,7,4,7,7,7,5,2,4,1,2,8,5,8,8,8,6,3,5,2,3,9,6,9,9,9],
                vec![5,7,5,4,5,6,3,5,7,2,6,8,6,5,6,7,4,6,8,3,7,9,7,6,7,8,5,7,9,4,8,1,8,7,8,9,6,8,1,5,9,2,9,8,9,1,7,9,2,6],
                vec![5,7,9,4,4,5,6,8,6,5,6,8,1,5,5,6,7,9,7,6,7,9,2,6,6,7,8,1,8,7,8,1,3,7,7,8,9,2,9,8,9,2,4,8,8,9,1,3,1,9],
                vec![7,5,6,9,8,6,5,1,7,4,8,6,7,1,9,7,6,2,8,5,9,7,8,2,1,8,7,3,9,6,1,8,9,3,2,9,8,4,1,7,2,9,1,4,3,1,9,5,2,8],
                vec![5,6,4,7,5,7,3,9,6,5,6,7,5,8,6,8,4,1,7,6,7,8,6,9,7,9,5,2,8,7,8,9,7,1,8,1,6,3,9,8,9,1,8,2,9,2,7,4,1,9],
                vec![6,7,5,5,4,8,8,9,3,5,7,8,6,6,5,9,9,1,4,6,8,9,7,7,6,1,1,2,5,7,9,1,8,8,7,2,2,3,6,8,1,2,9,9,8,3,3,4,7,9],
            ]
        );
    }

    #[test]
    fn it_solves_part2_example() {
        assert_eq!(
            part_2(
                "1163751742\n\
                 1381373672\n\
                 2136511328\n\
                 3694931569\n\
                 7463417111\n\
                 1319128137\n\
                 1359912421\n\
                 3125421639\n\
                 1293138521\n\
                 2311944581"
            ),
            315
        );
    }
}
